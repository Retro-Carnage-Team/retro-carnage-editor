package net.retrocarnage.editor.missionselector;

import java.awt.BorderLayout;
import javax.swing.ActionMap;
import net.retrocarnage.editor.nodes.actions.MissionEditAction;
import net.retrocarnage.editor.nodes.nodes.MissionChildren;
import net.retrocarnage.editor.nodes.nodes.MissionNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ListView;
import org.openide.nodes.AbstractNode;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the list of Missions.
 */
@ConvertAsProperties(
        dtd = "-//net.retrocarnage.editor.missionselector//Selector//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SelectorTopComponent",
        iconBase = "net/retrocarnage/editor/missionselector/icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "net.retrocarnage.editor.missionselector.SelectorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SelectorAction",
        preferredID = "SelectorTopComponent"
)
@Messages({
    "CTL_SelectorAction=Select a mission",
    "CTL_SelectorTopComponent=Missions",
    "HINT_SelectorTopComponent=List of missions"
})
public final class SelectorTopComponent extends TopComponent implements ExplorerManager.Provider {

    private final ExplorerManager explorerManager = new ExplorerManager();

    public SelectorTopComponent() {
        final ActionMap map = getActionMap();
        associateLookup(ExplorerUtils.createLookup(explorerManager, map));

        initComponents();

        final ListView view = new ListView();
        view.setDefaultProcessor(ae -> {
            if (ae.getSource() instanceof MissionNode) {
                new MissionEditAction(((MissionNode) ae.getSource()).getMission()).actionPerformed(ae);
            }
        });
        explorerManager.setRootContext(new AbstractNode(new MissionChildren()));
        add(view, BorderLayout.CENTER);

        setName(Bundle.CTL_SelectorTopComponent());
        setToolTipText(Bundle.HINT_SelectorTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void componentActivated() {
        ExplorerUtils.activateActions(explorerManager, true);
    }

    @Override
    protected void componentDeactivated() {
        ExplorerUtils.activateActions(explorerManager, false);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        p.getProperty("version");
    }

}
