package net.retrocarnage.editor.layerselector.gui;

import java.awt.BorderLayout;
import javax.swing.ActionMap;
import net.retrocarnage.editor.gameplayeditor.GamePlayEditorProxy;
import net.retrocarnage.editor.gameplayeditor.LayerController;
import net.retrocarnage.editor.layerselector.nodes.LayerChildren;
import net.retrocarnage.editor.model.Layer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ListView;
import org.openide.nodes.AbstractNode;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the Layers of the GamePlayEditor.
 */
@ConvertAsProperties(
        dtd = "-//net.retrocarnage.editor.layerselector.gui//LayerSelector//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LayerSelectorTopComponent",
        iconBase = "/net/retrocarnage/editor/layerselector/icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "rightSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "net.retrocarnage.editor.layerselector.gui.LayerSelectorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LayerSelectorAction",
        preferredID = "LayerSelectorTopComponent"
)
@Messages({
    "CTL_LayerSelectorAction=Layers",
    "CTL_LayerSelectorTopComponent=Layers",
    "HINT_LayerSelectorTopComponent=List of Layers"
})
public final class LayerSelectorTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static final String NEW_LAYER_TEXT = "Name";
    private static final String NEW_LAYER_TITLE = "Please specify a name for the new Layer";

    private final ExplorerManager explorerManager = new ExplorerManager();

    public LayerSelectorTopComponent() {
        final ActionMap map = getActionMap();
        associateLookup(ExplorerUtils.createLookup(explorerManager, map));

        initComponents();

        final ListView view = new ListView();
        explorerManager.setRootContext(new AbstractNode(new LayerChildren()));
        add(view, BorderLayout.CENTER);

        setName(Bundle.CTL_LayerSelectorTopComponent());
        setToolTipText(Bundle.HINT_LayerSelectorTopComponent());

        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlActions = new javax.swing.JPanel();
        btnAddLayer = new javax.swing.JButton();
        btnRemoveLayer = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pnlActions.setLayout(new java.awt.GridLayout(1, 0));

        org.openide.awt.Mnemonics.setLocalizedText(btnAddLayer, org.openide.util.NbBundle.getMessage(LayerSelectorTopComponent.class, "LayerSelectorTopComponent.btnAddLayer.text")); // NOI18N
        btnAddLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLayerActionPerformed(evt);
            }
        });
        pnlActions.add(btnAddLayer);

        org.openide.awt.Mnemonics.setLocalizedText(btnRemoveLayer, org.openide.util.NbBundle.getMessage(LayerSelectorTopComponent.class, "LayerSelectorTopComponent.btnRemoveLayer.text")); // NOI18N
        btnRemoveLayer.setEnabled(false);
        pnlActions.add(btnRemoveLayer);

        add(pnlActions, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLayerActionPerformed
        final LayerController controller = GamePlayEditorProxy.getDefault().getLookup().lookup(LayerController.class);
        if (null == controller) {
            return;
        }

        final NotifyDescriptor.InputLine inputLine = new NotifyDescriptor.InputLine(NEW_LAYER_TEXT, NEW_LAYER_TITLE);
        final Object result = DialogDisplayer.getDefault().notify(inputLine);
        if (NotifyDescriptor.OK_OPTION.equals(result)) {
            final Layer newLayer = new Layer();
            newLayer.setLocked(false);
            newLayer.setName(inputLine.getInputText());
            newLayer.setVisible(true);
            controller.addLayer(newLayer);
        }
    }//GEN-LAST:event_btnAddLayerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddLayer;
    private javax.swing.JButton btnRemoveLayer;
    private javax.swing.JPanel pnlActions;
    // End of variables declaration//GEN-END:variables
    @Override
    protected void componentActivated() {
        ExplorerUtils.activateActions(explorerManager, true);
    }

    @Override
    protected void componentDeactivated() {
        ExplorerUtils.activateActions(explorerManager, false);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        // String version = p.getProperty("version");
    }
}
