package net.retrocarnage.editor.gameplayeditor.gui;

import java.awt.Point;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.TransferHandler;
import net.retrocarnage.editor.gameplayeditor.impl.GamePlayEditorRepository;
import net.retrocarnage.editor.gameplayeditor.interfaces.GamePlayEditor;
import net.retrocarnage.editor.gameplayeditor.interfaces.SelectionController;
import net.retrocarnage.editor.model.GamePlay;
import net.retrocarnage.editor.model.Mission;
import net.retrocarnage.editor.model.Selectable;
import net.retrocarnage.editor.zoom.ZoomService;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the GamePlay of a Mission.
 */
@ConvertAsProperties(
        dtd = "-//net.retrocarnage.editor.gameplayeditor//GamePlayEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "GamePlayEditorTopComponent",
        iconBase = "net/retrocarnage/editor/gameplayeditor/gui/accessories-text-editor.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_GamePlayEditorAction=GamePlayEditor",
    "CTL_GamePlayEditorTopComponent=GamePlayEditor Window",
    "HINT_GamePlayEditorTopComponent=This is a GamePlayEditor window"
})
public final class GamePlayEditorTopComponent extends TopComponent implements GamePlayEditor, PropertyChangeListener {

    private final GamePlayEditorController controller;
    private final TransferHandler transferHandler;

    public GamePlayEditorTopComponent() {
        this(null);
    }

    public GamePlayEditorTopComponent(final Mission mission) {
        controller = new GamePlayEditorController(mission);
        controller.addPropertyChangeListener(this);
        transferHandler = new DragAndDropTransferHandler(controller);
        ZoomService.getDefault().addPropertyChangeListener(this);

        associateLookup(new AbstractLookup(controller.getLookupContent()));

        initComponents();

        setName(Bundle.CTL_GamePlayEditorTopComponent());
        setToolTipText(Bundle.HINT_GamePlayEditorTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code.
     *
     * The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrPane = new javax.swing.JScrollPane();
        pnlDisplay = new GamePlayDisplay(scrPane);
        ((GamePlayDisplay) pnlDisplay).updateDisplay(controller.getGamePlay(), null);

        setLayout(new java.awt.BorderLayout());

        pnlDisplay.setTransferHandler(transferHandler);
        pnlDisplay.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlDisplayMouseDragged(evt);
            }
        });
        pnlDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlDisplayMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                pnlDisplayMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlDisplayMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnlDisplayMouseReleased(evt);
            }
        });
        pnlDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pnlDisplayKeyTyped(evt);
            }
        });
        scrPane.setViewportView(pnlDisplay);

        add(scrPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void pnlDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDisplayMouseClicked
        final Point location = evt.getPoint();
        location.translate(-GamePlayDisplay.BORDER_WIDTH, -GamePlayDisplay.BORDER_WIDTH);
        controller.handleMouseClick(location);
        pnlDisplay.requestFocus();
    }//GEN-LAST:event_pnlDisplayMouseClicked

    private void pnlDisplayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDisplayMousePressed
        final Point location = evt.getPoint();
        location.translate(-GamePlayDisplay.BORDER_WIDTH, -GamePlayDisplay.BORDER_WIDTH);
        controller.handleMousePressed(location);
    }//GEN-LAST:event_pnlDisplayMousePressed

    private void pnlDisplayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDisplayMouseReleased
        final Point location = evt.getPoint();
        location.translate(-GamePlayDisplay.BORDER_WIDTH, -GamePlayDisplay.BORDER_WIDTH);
        controller.handleMouseReleased(location);
    }//GEN-LAST:event_pnlDisplayMouseReleased

    private void pnlDisplayMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDisplayMouseExited
        controller.handleMouseExited();
    }//GEN-LAST:event_pnlDisplayMouseExited

    private void pnlDisplayMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDisplayMouseDragged
        final Point location = evt.getPoint();
        location.translate(-GamePlayDisplay.BORDER_WIDTH, -GamePlayDisplay.BORDER_WIDTH);
        controller.handleMouseDragged(location);
    }//GEN-LAST:event_pnlDisplayMouseDragged

    private void pnlDisplayKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlDisplayKeyTyped
        if (KeyEvent.VK_DELETE == evt.getKeyChar()) {
            controller.removeSelectedElement();
        }
    }//GEN-LAST:event_pnlDisplayKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlDisplay;
    private javax.swing.JScrollPane scrPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        final Mission mission = controller.getMission();
        if (null != mission) {
            GamePlayEditorRepository.INSTANCE.register(mission.getId(), this);
            this.setDisplayName(mission.getName());
        }
    }

    @Override
    public void componentClosed() {
        final Mission mission = controller.getMission();
        if (null != mission) {
            GamePlayEditorRepository.INSTANCE.unregister(mission.getId(), this);
        }
        ZoomService.getDefault().removePropertyChangeListener(this);
        controller.removePropertyChangeListener(this);
        controller.close();
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        // String version = p.getProperty("version");
    }

    @Override
    public void propertyChange(final PropertyChangeEvent pce) {
        if (GamePlayEditorController.PROPERTY_GAMEPLAY.equals(pce.getPropertyName())
                || ZoomService.PROPERTY_ZOOM.equals(pce.getPropertyName())) {
            final GamePlay gamePlay = controller.getGamePlay();
            final Selectable selection = getLookup().lookup(SelectionController.class).getSelection();
            ((GamePlayDisplay) pnlDisplay).updateDisplay(gamePlay, selection);
        }
    }
}
