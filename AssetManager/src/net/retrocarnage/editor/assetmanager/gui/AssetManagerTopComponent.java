package net.retrocarnage.editor.assetmanager.gui;

import java.awt.CardLayout;
import java.beans.PropertyChangeEvent;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import net.retrocarnage.editor.assetmanager.model.Asset;
import net.retrocarnage.editor.assetmanager.model.Music;
import org.apache.commons.io.FilenameUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the asset database.
 */
@ConvertAsProperties(
        dtd = "-//net.retrocarnage.editor.assetmanager.gui//AssetManager//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "AssetManagerTopComponent",
        iconBase = "net/retrocarnage/editor/assetmanager/gui/emblem-photos.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "net.retrocarnage.editor.assetmanager.gui.AssetManagerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AssetManagerAction",
        preferredID = "AssetManagerTopComponent"
)
@Messages({
    "CTL_AssetManagerAction=AssetManager",
    "CTL_AssetManagerTopComponent=AssetManager Window",
    "HINT_AssetManagerTopComponent=This is a AssetManager window"
})
public final class AssetManagerTopComponent extends TopComponent {

    private final AssetManagerController controller;
    private final JTextField[] musicEditorFields;
    private final JTextField[] spriteEditorFields;

    public AssetManagerTopComponent() {
        controller = new AssetManagerController();
        controller.addPropertyChangeListener((pce) -> controllerPropertyChanged(pce));

        initComponents();
        musicEditorFields = new JTextField[]{
            txtMusicName,
            txtMusicTags,
            txtMusicAuthor,
            txtMusicWebsite,
            txtMusicLicenseLink,
            txtMusicLicenceText
        };
        spriteEditorFields = new JTextField[]{
            txtSpriteName,
            txtSpriteTags,
            txtSpriteAuthor,
            txtSpriteWebsite,
            txtSpriteLicenseLink,
            txtSpriteLicenceText
        };

        setName(Bundle.CTL_AssetManagerTopComponent());
        setToolTipText(Bundle.HINT_AssetManagerTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMenu = new javax.swing.JPanel();
        pnlMenuLeft = new javax.swing.JPanel();
        btnAddSprite = new javax.swing.JButton();
        btnAddMusic = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        pnlMenuRight = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnlTable = new javax.swing.JPanel();
        scrTable = new javax.swing.JScrollPane();
        tblAssets = new javax.swing.JTable();
        pnlEditor = new javax.swing.JPanel();
        pnlMusicEditor = new javax.swing.JPanel();
        pnlMusicPlayer = new javax.swing.JPanel();
        lblMusicPlayer = new javax.swing.JLabel();
        pnlMusicAttribution = new javax.swing.JPanel();
        lblMusicAuthor = new javax.swing.JLabel();
        lblMusicWebsite = new javax.swing.JLabel();
        lblMusicLicenseLink = new javax.swing.JLabel();
        lblMusicLicenseText = new javax.swing.JLabel();
        txtMusicAuthor = new javax.swing.JTextField();
        txtMusicWebsite = new javax.swing.JTextField();
        txtMusicLicenseLink = new javax.swing.JTextField();
        txtMusicLicenceText = new javax.swing.JTextField();
        lblMusicId = new javax.swing.JLabel();
        lblMusicIdDisplay = new javax.swing.JLabel();
        lblMusicName = new javax.swing.JLabel();
        txtMusicName = new javax.swing.JTextField();
        lblMusicTags = new javax.swing.JLabel();
        txtMusicTags = new javax.swing.JTextField();
        pnlMusicSpacer = new javax.swing.JPanel();
        pnlSpriteEditor = new javax.swing.JPanel();
        pnlSpriteThumbnail = new javax.swing.JPanel();
        pnlSpriteAttribution = new javax.swing.JPanel();
        lblSpriteAuthor = new javax.swing.JLabel();
        lblSpriteWebsite = new javax.swing.JLabel();
        lblSpriteLicenseLink = new javax.swing.JLabel();
        lblSpriteLicenseText = new javax.swing.JLabel();
        txtSpriteAuthor = new javax.swing.JTextField();
        txtSpriteWebsite = new javax.swing.JTextField();
        txtSpriteLicenseLink = new javax.swing.JTextField();
        txtSpriteLicenceText = new javax.swing.JTextField();
        lblSpriteId = new javax.swing.JLabel();
        lblSpriteIdDisplay = new javax.swing.JLabel();
        lblSpriteName = new javax.swing.JLabel();
        txtSpriteName = new javax.swing.JTextField();
        lblSpriteTags = new javax.swing.JLabel();
        txtSpriteTags = new javax.swing.JTextField();
        pnlSpriteSpacer = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pnlMenu.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(btnAddSprite, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.btnAddSprite.text")); // NOI18N
        btnAddSprite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddSpriteMouseClicked(evt);
            }
        });
        pnlMenuLeft.add(btnAddSprite);

        org.openide.awt.Mnemonics.setLocalizedText(btnAddMusic, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.jButton2.text")); // NOI18N
        pnlMenuLeft.add(btnAddMusic);

        org.openide.awt.Mnemonics.setLocalizedText(btnUpdate, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.btnUpdate.text_1")); // NOI18N
        btnUpdate.setEnabled(false);
        pnlMenuLeft.add(btnUpdate);

        pnlMenu.add(pnlMenuLeft, java.awt.BorderLayout.WEST);

        org.openide.awt.Mnemonics.setLocalizedText(btnCancel, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.btnCancel.text_1")); // NOI18N
        btnCancel.setEnabled(false);
        pnlMenuRight.add(btnCancel);

        org.openide.awt.Mnemonics.setLocalizedText(btnDelete, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.btnDelete.text")); // NOI18N
        btnDelete.setEnabled(false);
        pnlMenuRight.add(btnDelete);

        pnlMenu.add(pnlMenuRight, java.awt.BorderLayout.EAST);

        add(pnlMenu, java.awt.BorderLayout.NORTH);

        pnlTable.setLayout(new java.awt.BorderLayout());

        tblAssets.setModel(controller.getTableModel());
        tblAssets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAssets.getSelectionModel().addListSelectionListener(controller.getTableSelectionListener());
        scrTable.setViewportView(tblAssets);

        pnlTable.add(scrTable, java.awt.BorderLayout.CENTER);

        add(pnlTable, java.awt.BorderLayout.CENTER);

        pnlEditor.setLayout(new java.awt.CardLayout());

        pnlMusicEditor.setLayout(new java.awt.GridBagLayout());

        pnlMusicPlayer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlMusicPlayer.setPreferredSize(new java.awt.Dimension(100, 100));
        pnlMusicPlayer.setLayout(new java.awt.BorderLayout());

        lblMusicPlayer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMusicPlayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/retrocarnage/editor/assetmanager/gui/media-playback-start.png"))); // NOI18N
        pnlMusicPlayer.add(lblMusicPlayer, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        pnlMusicEditor.add(pnlMusicPlayer, gridBagConstraints);

        pnlMusicAttribution.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.pnlMusicAttribution.border.title"))); // NOI18N
        pnlMusicAttribution.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicAuthor, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicAuthor.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicAttribution.add(lblMusicAuthor, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicWebsite, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicWebsite.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicAttribution.add(lblMusicWebsite, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicLicenseLink, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicLicenseLink.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicAttribution.add(lblMusicLicenseLink, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicLicenseText, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicLicenseText.text")); // NOI18N
        lblMusicLicenseText.setToolTipText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicLicenseText.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicAttribution.add(lblMusicLicenseText, gridBagConstraints);

        txtMusicAuthor.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicAuthor.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicAttribution.add(txtMusicAuthor, gridBagConstraints);

        txtMusicWebsite.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicWebsite.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicAttribution.add(txtMusicWebsite, gridBagConstraints);

        txtMusicLicenseLink.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicLicenseLink.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicAttribution.add(txtMusicLicenseLink, gridBagConstraints);

        txtMusicLicenceText.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicLicenceText.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicAttribution.add(txtMusicLicenceText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 2, 2, 2);
        pnlMusicEditor.add(pnlMusicAttribution, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicId, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicEditor.add(lblMusicId, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicIdDisplay, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicIdDisplay.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicEditor.add(lblMusicIdDisplay, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicName, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicName.text")); // NOI18N
        lblMusicName.setToolTipText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicName.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicEditor.add(lblMusicName, gridBagConstraints);

        txtMusicName.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicEditor.add(txtMusicName, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicTags, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicTags.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicEditor.add(lblMusicTags, gridBagConstraints);

        txtMusicTags.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicTags.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicEditor.add(txtMusicTags, gridBagConstraints);

        pnlMusicSpacer.setPreferredSize(new java.awt.Dimension(0, 0));
        pnlMusicSpacer.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnlMusicSpacerLayout = new javax.swing.GroupLayout(pnlMusicSpacer);
        pnlMusicSpacer.setLayout(pnlMusicSpacerLayout);
        pnlMusicSpacerLayout.setHorizontalGroup(
            pnlMusicSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlMusicSpacerLayout.setVerticalGroup(
            pnlMusicSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlMusicEditor.add(pnlMusicSpacer, gridBagConstraints);

        pnlEditor.add(pnlMusicEditor, "music");

        pnlSpriteEditor.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pnlSpriteEditor.setLayout(new java.awt.GridBagLayout());

        pnlSpriteThumbnail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlSpriteThumbnail.setPreferredSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout pnlSpriteThumbnailLayout = new javax.swing.GroupLayout(pnlSpriteThumbnail);
        pnlSpriteThumbnail.setLayout(pnlSpriteThumbnailLayout);
        pnlSpriteThumbnailLayout.setHorizontalGroup(
            pnlSpriteThumbnailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );
        pnlSpriteThumbnailLayout.setVerticalGroup(
            pnlSpriteThumbnailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        pnlSpriteEditor.add(pnlSpriteThumbnail, gridBagConstraints);

        pnlSpriteAttribution.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.pnlSpriteAttribution.border.title"))); // NOI18N
        pnlSpriteAttribution.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteAuthor, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteAuthor.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteAuthor, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteWebsite, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteWebsite.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteWebsite, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteLicenseLink, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteLicenseLink.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteLicenseLink, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteLicenseText, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteLicenseText.text")); // NOI18N
        lblSpriteLicenseText.setToolTipText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteLicenseText.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteLicenseText, gridBagConstraints);

        txtSpriteAuthor.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteAuthor.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteAuthor, gridBagConstraints);

        txtSpriteWebsite.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteWebsite.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteWebsite, gridBagConstraints);

        txtSpriteLicenseLink.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteLicenseLink.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteLicenseLink, gridBagConstraints);

        txtSpriteLicenceText.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteLicenceText.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteLicenceText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 2, 2, 2);
        pnlSpriteEditor.add(pnlSpriteAttribution, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteId, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteEditor.add(lblSpriteId, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteIdDisplay, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteIdDisplay.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteEditor.add(lblSpriteIdDisplay, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteName, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteName.text")); // NOI18N
        lblSpriteName.setToolTipText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteName.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteEditor.add(lblSpriteName, gridBagConstraints);

        txtSpriteName.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteEditor.add(txtSpriteName, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteTags, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteTags.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteEditor.add(lblSpriteTags, gridBagConstraints);

        txtSpriteTags.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteTags.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteEditor.add(txtSpriteTags, gridBagConstraints);

        pnlSpriteSpacer.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnlSpriteSpacerLayout = new javax.swing.GroupLayout(pnlSpriteSpacer);
        pnlSpriteSpacer.setLayout(pnlSpriteSpacerLayout);
        pnlSpriteSpacerLayout.setHorizontalGroup(
            pnlSpriteSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlSpriteSpacerLayout.setVerticalGroup(
            pnlSpriteSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlSpriteEditor.add(pnlSpriteSpacer, gridBagConstraints);

        pnlEditor.add(pnlSpriteEditor, "sprite");

        add(pnlEditor, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddSpriteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddSpriteMouseClicked
        if (controller.isAssetModified()) {
            // TODO: Ask user to save changes
        }

        final File selectAssetResource = this.selectAssetResource(new ImageFileFilter());
        if (null != selectAssetResource) {
            controller.newSpriteAsset(selectAssetResource);
        }
    }//GEN-LAST:event_btnAddSpriteMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMusic;
    private javax.swing.JButton btnAddSprite;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel lblMusicAuthor;
    private javax.swing.JLabel lblMusicId;
    private javax.swing.JLabel lblMusicIdDisplay;
    private javax.swing.JLabel lblMusicLicenseLink;
    private javax.swing.JLabel lblMusicLicenseText;
    private javax.swing.JLabel lblMusicName;
    private javax.swing.JLabel lblMusicPlayer;
    private javax.swing.JLabel lblMusicTags;
    private javax.swing.JLabel lblMusicWebsite;
    private javax.swing.JLabel lblSpriteAuthor;
    private javax.swing.JLabel lblSpriteId;
    private javax.swing.JLabel lblSpriteIdDisplay;
    private javax.swing.JLabel lblSpriteLicenseLink;
    private javax.swing.JLabel lblSpriteLicenseText;
    private javax.swing.JLabel lblSpriteName;
    private javax.swing.JLabel lblSpriteTags;
    private javax.swing.JLabel lblSpriteWebsite;
    private javax.swing.JPanel pnlEditor;
    private javax.swing.JPanel pnlMenu;
    private javax.swing.JPanel pnlMenuLeft;
    private javax.swing.JPanel pnlMenuRight;
    private javax.swing.JPanel pnlMusicAttribution;
    private javax.swing.JPanel pnlMusicEditor;
    private javax.swing.JPanel pnlMusicPlayer;
    private javax.swing.JPanel pnlMusicSpacer;
    private javax.swing.JPanel pnlSpriteAttribution;
    private javax.swing.JPanel pnlSpriteEditor;
    private javax.swing.JPanel pnlSpriteSpacer;
    private javax.swing.JPanel pnlSpriteThumbnail;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JScrollPane scrTable;
    private javax.swing.JTable tblAssets;
    private javax.swing.JTextField txtMusicAuthor;
    private javax.swing.JTextField txtMusicLicenceText;
    private javax.swing.JTextField txtMusicLicenseLink;
    private javax.swing.JTextField txtMusicName;
    private javax.swing.JTextField txtMusicTags;
    private javax.swing.JTextField txtMusicWebsite;
    private javax.swing.JTextField txtSpriteAuthor;
    private javax.swing.JTextField txtSpriteLicenceText;
    private javax.swing.JTextField txtSpriteLicenseLink;
    private javax.swing.JTextField txtSpriteName;
    private javax.swing.JTextField txtSpriteTags;
    private javax.swing.JTextField txtSpriteWebsite;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(final java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(final java.util.Properties p) {
        // String version = p.getProperty("version");
    }

    private void controllerPropertyChanged(final PropertyChangeEvent pce) {
        if (AssetManagerController.PROPERTY_SELECTED_ASSET.equals(pce.getPropertyName())) {
            String editorToShow;
            if (pce.getNewValue() instanceof Music) {
                populateAssetEditor(lblMusicIdDisplay, musicEditorFields);
                editorToShow = "music";
            } else {
                populateAssetEditor(lblSpriteIdDisplay, spriteEditorFields);
                editorToShow = "sprite";
            }

            ((CardLayout) (pnlEditor.getLayout())).show(pnlEditor, editorToShow);
        }
    }

    private void populateAssetEditor(final JLabel idDisplay, final JTextField[] assetFields) {
        final Asset<?> asset = controller.getSelectedAsset();
        idDisplay.setText(asset.getId());
        assetFields[0].setText(asset.getName());
        assetFields[1].setText(String.join(" ", asset.getTags()));
        assetFields[2].setText(asset.getAttributionData().getAuthor());
        assetFields[3].setText(asset.getAttributionData().getWebsite());
        assetFields[4].setText(asset.getAttributionData().getLicenseLink());
        assetFields[5].setText(asset.getAttributionData().getLicenseText());
    }

    File selectAssetResource(final FileFilter fileFilter) {
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(fileFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        final int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();

        }
        return null;
    }

    private static class ImageFileFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            final String extension = FilenameUtils.getExtension(f.getName()).toUpperCase();
            return extension.equals("GIF")
                    || extension.equals("PNG")
                    || extension.equals("JPEG")
                    || extension.equals("JPG")
                    || extension.equals("BMP")
                    || extension.equals("WBMP");
        }

        @Override
        public String getDescription() {
            return "Image files";
        }
    }

}
