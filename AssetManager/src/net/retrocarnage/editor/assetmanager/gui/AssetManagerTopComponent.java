package net.retrocarnage.editor.assetmanager.gui;

import java.awt.CardLayout;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.CANCEL_OPTION;
import static javax.swing.JOptionPane.CLOSED_OPTION;
import static javax.swing.JOptionPane.NO_OPTION;
import static javax.swing.JOptionPane.YES_NO_CANCEL_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.BadLocationException;
import net.retrocarnage.editor.assetmanager.impl.AssetServiceImpl;
import net.retrocarnage.editor.core.ApplicationFolderService;
import net.retrocarnage.editor.model.Asset;
import net.retrocarnage.editor.model.Music;
import net.retrocarnage.editor.model.Sprite;
import org.apache.commons.io.FilenameUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the asset database.
 */
@ConvertAsProperties(
        dtd = "-//net.retrocarnage.editor.assetmanager.gui//AssetManager//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "AssetManagerTopComponent",
        iconBase = "net/retrocarnage/editor/assetmanager/gui/icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "net.retrocarnage.editor.assetmanager.gui.AssetManagerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AssetManagerAction",
        preferredID = "AssetManagerTopComponent"
)
@Messages({
    "CTL_AssetManagerAction=Asset Manager",
    "CTL_AssetManagerTopComponent=Asset Manager",
    "HINT_AssetManagerTopComponent=Manage your sound and graphic assets"
})
public final class AssetManagerTopComponent extends TopComponent {

    private static final Logger logger = Logger.getLogger(AssetManagerTopComponent.class.getName());
    private static final String DIALOG_TITLE_ALERT = "Alert";

    private final AssetManagerController controller;
    private final JTextField[] musicEditorFields;
    private final JTextField[] spriteEditorFields;

    public AssetManagerTopComponent() {
        controller = new AssetManagerController();
        controller.addPropertyChangeListener(pce -> controllerPropertyChanged(pce));

        initComponents();
        musicEditorFields = new JTextField[]{
            txtMusicName,
            txtMusicTags,
            txtMusicAuthor,
            txtMusicWebsite,
            txtMusicLicenseLink,
            txtMusicLicenseText
        };
        spriteEditorFields = new JTextField[]{
            txtSpriteName,
            txtSpriteTags,
            txtSpriteAuthor,
            txtSpriteWebsite,
            txtSpriteLicenseLink,
            txtSpriteLicenseText
        };

        setName(Bundle.CTL_AssetManagerTopComponent());
        setToolTipText(Bundle.HINT_AssetManagerTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel pnlMenu = new javax.swing.JPanel();
        javax.swing.JPanel pnlMenuLeft = new javax.swing.JPanel();
        javax.swing.JButton btnAddSprite = new javax.swing.JButton();
        javax.swing.JButton btnAddMusic = new javax.swing.JButton();
        btnSaveAsset = new javax.swing.JButton();
        javax.swing.JPanel pnlMenuRight = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnlTable = new javax.swing.JPanel();
        javax.swing.JScrollPane scrTable = new javax.swing.JScrollPane();
        javax.swing.JTable tblAssets = new javax.swing.JTable();
        pnlEditor = new javax.swing.JPanel();
        javax.swing.JPanel pnlMusicEditor = new javax.swing.JPanel();
        javax.swing.JPanel pnlMusicPlayer = new javax.swing.JPanel();
        javax.swing.JLabel lblMusicPlayer = new javax.swing.JLabel();
        javax.swing.JPanel pnlMusicAttribution = new javax.swing.JPanel();
        javax.swing.JLabel lblMusicAuthor = new javax.swing.JLabel();
        javax.swing.JLabel lblMusicWebsite = new javax.swing.JLabel();
        javax.swing.JLabel lblMusicLicenseLink = new javax.swing.JLabel();
        javax.swing.JLabel lblMusicLicenseText = new javax.swing.JLabel();
        txtMusicAuthor = new javax.swing.JTextField();
        txtMusicWebsite = new javax.swing.JTextField();
        txtMusicLicenseLink = new javax.swing.JTextField();
        txtMusicLicenseText = new javax.swing.JTextField();
        javax.swing.JLabel lblMusicId = new javax.swing.JLabel();
        lblMusicIdDisplay = new javax.swing.JLabel();
        javax.swing.JLabel lblMusicName = new javax.swing.JLabel();
        txtMusicName = new javax.swing.JTextField();
        javax.swing.JLabel lblMusicTags = new javax.swing.JLabel();
        txtMusicTags = new javax.swing.JTextField();
        javax.swing.JPanel pnlMusicSpacer = new javax.swing.JPanel();
        javax.swing.JPanel pnlSpriteEditor = new javax.swing.JPanel();
        javax.swing.JPanel pnlSpriteThumbnail = new javax.swing.JPanel();
        lblSpriteThumbnail = new javax.swing.JLabel();
        javax.swing.JPanel pnlSpriteAttribution = new javax.swing.JPanel();
        javax.swing.JLabel lblSpriteAuthor = new javax.swing.JLabel();
        javax.swing.JLabel lblSpriteWebsite = new javax.swing.JLabel();
        javax.swing.JLabel lblSpriteLicenseLink = new javax.swing.JLabel();
        javax.swing.JLabel lblSpriteLicenseText = new javax.swing.JLabel();
        txtSpriteAuthor = new javax.swing.JTextField();
        txtSpriteWebsite = new javax.swing.JTextField();
        txtSpriteLicenseLink = new javax.swing.JTextField();
        txtSpriteLicenseText = new javax.swing.JTextField();
        javax.swing.JLabel lblSpriteId = new javax.swing.JLabel();
        lblSpriteIdDisplay = new javax.swing.JLabel();
        javax.swing.JLabel lblSpriteName = new javax.swing.JLabel();
        txtSpriteName = new javax.swing.JTextField();
        javax.swing.JLabel lblSpriteTags = new javax.swing.JLabel();
        txtSpriteTags = new javax.swing.JTextField();
        javax.swing.JPanel pnlSpriteSpacer = new javax.swing.JPanel();
        javax.swing.JLabel lblTile = new javax.swing.JLabel();
        chkTile = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        pnlMenu.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(btnAddSprite, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.btnAddSprite.text")); // NOI18N
        btnAddSprite.addActionListener(evt -> btnAddSpriteActionPerformed());
        pnlMenuLeft.add(btnAddSprite);

        org.openide.awt.Mnemonics.setLocalizedText(btnAddMusic, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.jButton2.text")); // NOI18N
        btnAddMusic.addActionListener(evt -> btnAddMusicActionPerformed());
        pnlMenuLeft.add(btnAddMusic);

        org.openide.awt.Mnemonics.setLocalizedText(btnSaveAsset, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.btnSaveAsset.text_1")); // NOI18N
        btnSaveAsset.setEnabled(false);
        btnSaveAsset.addActionListener(evt -> btnSaveAssetActionPerformed());
        pnlMenuLeft.add(btnSaveAsset);

        pnlMenu.add(pnlMenuLeft, java.awt.BorderLayout.WEST);

        org.openide.awt.Mnemonics.setLocalizedText(btnCancel, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.btnCancel.text_1")); // NOI18N
        btnCancel.setEnabled(false);
        btnCancel.addActionListener(evt -> btnCancelActionPerformed());
        pnlMenuRight.add(btnCancel);

        org.openide.awt.Mnemonics.setLocalizedText(btnDelete, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.btnDelete.text")); // NOI18N
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(evt -> btnDeleteActionPerformed());
        pnlMenuRight.add(btnDelete);

        pnlMenu.add(pnlMenuRight, java.awt.BorderLayout.EAST);

        add(pnlMenu, java.awt.BorderLayout.NORTH);

        pnlTable.setLayout(new java.awt.BorderLayout());

        tblAssets.setModel(controller.getTableModel());
        tblAssets.setRowHeight(24);
        tblAssets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAssets.getSelectionModel().addListSelectionListener(controller.getTableSelectionListener(tblAssets));
        scrTable.setViewportView(tblAssets);

        pnlTable.add(scrTable, java.awt.BorderLayout.CENTER);

        add(pnlTable, java.awt.BorderLayout.CENTER);

        pnlEditor.setLayout(new java.awt.CardLayout());

        pnlMusicEditor.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pnlMusicEditor.setLayout(new java.awt.GridBagLayout());

        pnlMusicPlayer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlMusicPlayer.setPreferredSize(new java.awt.Dimension(100, 100));
        pnlMusicPlayer.setLayout(new java.awt.BorderLayout());

        lblMusicPlayer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMusicPlayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/retrocarnage/editor/assetmanager/gui/media-playback-start.png"))); // NOI18N
        pnlMusicPlayer.add(lblMusicPlayer, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        pnlMusicEditor.add(pnlMusicPlayer, gridBagConstraints);

        pnlMusicAttribution.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.pnlMusicAttribution.border.title"))); // NOI18N
        pnlMusicAttribution.setLayout(new java.awt.GridBagLayout());

        lblMusicAuthor.setLabelFor(txtMusicAuthor);
        org.openide.awt.Mnemonics.setLocalizedText(lblMusicAuthor, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicAuthor.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicAttribution.add(lblMusicAuthor, gridBagConstraints);

        lblMusicWebsite.setLabelFor(txtMusicWebsite);
        org.openide.awt.Mnemonics.setLocalizedText(lblMusicWebsite, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicWebsite.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicAttribution.add(lblMusicWebsite, gridBagConstraints);

        lblMusicLicenseLink.setLabelFor(txtMusicLicenseLink);
        org.openide.awt.Mnemonics.setLocalizedText(lblMusicLicenseLink, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicLicenseLink.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicAttribution.add(lblMusicLicenseLink, gridBagConstraints);

        lblMusicLicenseText.setLabelFor(txtMusicLicenseText);
        org.openide.awt.Mnemonics.setLocalizedText(lblMusicLicenseText, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicLicenseText.text")); // NOI18N
        lblMusicLicenseText.setToolTipText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicLicenseText.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicAttribution.add(lblMusicLicenseText, gridBagConstraints);

        txtMusicAuthor.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicAuthor.text")); // NOI18N
        txtMusicAuthor.getDocument().addDocumentListener(new MusicAuthorUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicAttribution.add(txtMusicAuthor, gridBagConstraints);

        txtMusicWebsite.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicWebsite.text")); // NOI18N
        txtMusicWebsite.getDocument().addDocumentListener(new MusicWebsiteUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicAttribution.add(txtMusicWebsite, gridBagConstraints);

        txtMusicLicenseLink.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicLicenseLink.text")); // NOI18N
        txtMusicLicenseLink.getDocument().addDocumentListener(new MusicLicenseLinkUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicAttribution.add(txtMusicLicenseLink, gridBagConstraints);

        txtMusicLicenseText.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicLicenseText.text")); // NOI18N
        txtMusicLicenseText.getDocument().addDocumentListener(new MusicLicenseTextUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicAttribution.add(txtMusicLicenseText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 2, 2, 2);
        pnlMusicEditor.add(pnlMusicAttribution, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicId, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicEditor.add(lblMusicId, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblMusicIdDisplay, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicIdDisplay.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicEditor.add(lblMusicIdDisplay, gridBagConstraints);

        lblMusicName.setLabelFor(txtMusicName);
        org.openide.awt.Mnemonics.setLocalizedText(lblMusicName, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicEditor.add(lblMusicName, gridBagConstraints);

        txtMusicName.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicName.text")); // NOI18N
        txtMusicName.getDocument().addDocumentListener(new MusicNameUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicEditor.add(txtMusicName, gridBagConstraints);

        lblMusicTags.setLabelFor(txtMusicTags);
        org.openide.awt.Mnemonics.setLocalizedText(lblMusicTags, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblMusicTags.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlMusicEditor.add(lblMusicTags, gridBagConstraints);

        txtMusicTags.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtMusicTags.text")); // NOI18N
        txtMusicTags.getDocument().addDocumentListener(new MusicTagsUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlMusicEditor.add(txtMusicTags, gridBagConstraints);

        pnlMusicSpacer.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout pnlMusicSpacerLayout = new javax.swing.GroupLayout(pnlMusicSpacer);
        pnlMusicSpacer.setLayout(pnlMusicSpacerLayout);
        pnlMusicSpacerLayout.setHorizontalGroup(
            pnlMusicSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlMusicSpacerLayout.setVerticalGroup(
            pnlMusicSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlMusicEditor.add(pnlMusicSpacer, gridBagConstraints);

        pnlEditor.add(pnlMusicEditor, "music");

        pnlSpriteEditor.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        pnlSpriteEditor.setLayout(new java.awt.GridBagLayout());

        pnlSpriteThumbnail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlSpriteThumbnail.setPreferredSize(new java.awt.Dimension(100, 100));
        pnlSpriteThumbnail.setLayout(new java.awt.BorderLayout());

        lblSpriteThumbnail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnlSpriteThumbnail.add(lblSpriteThumbnail, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        pnlSpriteEditor.add(pnlSpriteThumbnail, gridBagConstraints);

        pnlSpriteAttribution.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.pnlSpriteAttribution.border.title"))); // NOI18N
        pnlSpriteAttribution.setLayout(new java.awt.GridBagLayout());

        lblSpriteAuthor.setLabelFor(txtSpriteAuthor);
        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteAuthor, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteAuthor.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteAuthor, gridBagConstraints);

        lblSpriteWebsite.setLabelFor(txtSpriteWebsite);
        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteWebsite, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteWebsite.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteWebsite, gridBagConstraints);

        lblSpriteLicenseLink.setLabelFor(txtSpriteLicenseLink);
        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteLicenseLink, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteLicenseLink.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteLicenseLink, gridBagConstraints);

        lblSpriteLicenseText.setLabelFor(txtSpriteLicenseText);
        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteLicenseText, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteLicenseText.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteLicenseText, gridBagConstraints);

        txtSpriteAuthor.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteAuthor.text")); // NOI18N
        txtSpriteAuthor.getDocument().addDocumentListener(new SpriteAuthorUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteAuthor, gridBagConstraints);

        txtSpriteWebsite.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteWebsite.text")); // NOI18N
        txtSpriteWebsite.getDocument().addDocumentListener(new SpriteWebsiteUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteWebsite, gridBagConstraints);

        txtSpriteLicenseLink.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteLicenseLink.text")); // NOI18N
        txtSpriteLicenseLink.getDocument().addDocumentListener(new SpriteLicenseLinkUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteLicenseLink, gridBagConstraints);

        txtSpriteLicenseText.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteLicenseText.text")); // NOI18N
        txtSpriteLicenseText.getDocument().addDocumentListener(new SpriteLicenseTextUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteLicenseText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 2, 2, 2);
        pnlSpriteEditor.add(pnlSpriteAttribution, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteId, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteId.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteEditor.add(lblSpriteId, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteIdDisplay, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteIdDisplay.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteEditor.add(lblSpriteIdDisplay, gridBagConstraints);

        lblSpriteName.setLabelFor(txtSpriteName);
        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteName, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteEditor.add(lblSpriteName, gridBagConstraints);

        txtSpriteName.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteName.text")); // NOI18N
        txtSpriteName.getDocument().addDocumentListener(new SpriteNameUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteEditor.add(txtSpriteName, gridBagConstraints);

        lblSpriteTags.setLabelFor(txtSpriteTags);
        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteTags, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblSpriteTags.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteEditor.add(lblSpriteTags, gridBagConstraints);

        txtSpriteTags.setText(org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.txtSpriteTags.text")); // NOI18N
        txtSpriteTags.getDocument().addDocumentListener(new SpriteTagsUpdateListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteEditor.add(txtSpriteTags, gridBagConstraints);

        javax.swing.GroupLayout pnlSpriteSpacerLayout = new javax.swing.GroupLayout(pnlSpriteSpacer);
        pnlSpriteSpacer.setLayout(pnlSpriteSpacerLayout);
        pnlSpriteSpacerLayout.setHorizontalGroup(
            pnlSpriteSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlSpriteSpacerLayout.setVerticalGroup(
            pnlSpriteSpacerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        pnlSpriteEditor.add(pnlSpriteSpacer, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblTile, org.openide.util.NbBundle.getMessage(AssetManagerTopComponent.class, "AssetManagerTopComponent.lblTile.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteEditor.add(lblTile, gridBagConstraints);

        chkTile.setPreferredSize(new java.awt.Dimension(18, 39));
        chkTile.addActionListener(evt -> chkTileActionPerformed());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteEditor.add(chkTile, gridBagConstraints);

        pnlEditor.add(pnlSpriteEditor, "sprite");

        add(pnlEditor, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddSpriteActionPerformed() {                                             
        if (handleUnsavedChanges()) {
            final File selectAssetResource = this.selectAssetResource(new ImageFileFilter());
            if (null != selectAssetResource) {
                controller.newSpriteAsset(selectAssetResource);
                try {
                    lblSpriteThumbnail.setIcon(new ImageIcon(AssetServiceImpl.getThumbnailImage(selectAssetResource)));
                } catch (IOException ex) {
                    logger.log(Level.WARNING, "Failed to get image thumbnail", ex);
                    lblSpriteThumbnail.setIcon(null);
                }
            }
        }
    }         
    
    private void btnAddMusicActionPerformed() {                                            
        if (handleUnsavedChanges()) {
            final File selectAssetResource = this.selectAssetResource(new ImageMusicFilter());
            if (null != selectAssetResource) {
                controller.newMusicAsset(selectAssetResource);
            }
        }
    }    
    
    private void btnSaveAssetActionPerformed() {                                             
        final boolean saved = controller.saveChanges();
        btnSaveAsset.setEnabled(!saved);
        btnCancel.setEnabled(!saved);
    }     
    
    private void btnCancelActionPerformed() {
        final String message = "Unsaved changes will be discarded. Do you want to continue?";
        final int selectedOption = JOptionPane.showConfirmDialog(this, message, DIALOG_TITLE_ALERT, YES_NO_CANCEL_OPTION);
        if (selectedOption == YES_OPTION) {
            discardChanges();
        }
    }      
    
    private void btnDeleteActionPerformed() { 
        final String message = "This will delete the selected asset. Do you want to continue?";
        final int selectedOption = JOptionPane.showConfirmDialog(this, message, DIALOG_TITLE_ALERT, YES_NO_CANCEL_OPTION);
        if (selectedOption == YES_OPTION) {
            controller.deleteAsset();
            discardChanges();
        }
    }     
    
    private void chkTileActionPerformed() {
        final Sprite sprite = (Sprite) controller.getSelectedAsset();
        if ((null != sprite)) {
            sprite.setTile(chkTile.isSelected());
            btnSaveAsset.setEnabled(true);
            btnCancel.setEnabled(true);
        }
    }     
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSaveAsset;
    private javax.swing.JCheckBox chkTile;
    private javax.swing.JLabel lblMusicIdDisplay;
    private javax.swing.JLabel lblSpriteIdDisplay;
    private javax.swing.JLabel lblSpriteThumbnail;
    private javax.swing.JPanel pnlEditor;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JTextField txtMusicAuthor;
    private javax.swing.JTextField txtMusicLicenseLink;
    private javax.swing.JTextField txtMusicLicenseText;
    private javax.swing.JTextField txtMusicName;
    private javax.swing.JTextField txtMusicTags;
    private javax.swing.JTextField txtMusicWebsite;
    private javax.swing.JTextField txtSpriteAuthor;
    private javax.swing.JTextField txtSpriteLicenseLink;
    private javax.swing.JTextField txtSpriteLicenseText;
    private javax.swing.JTextField txtSpriteName;
    private javax.swing.JTextField txtSpriteTags;
    private javax.swing.JTextField txtSpriteWebsite;
    // End of variables declaration//GEN-END:variables

    void writeProperties(final java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(final java.util.Properties p) {
        p.getProperty("version");
    }

    /**
     * Checks if there are unsaved changes to one of the editors. Asks the user how to proceed and invokes the selected
     * option.
     *
     * @return true if the calling process should continue
     */
    private boolean handleUnsavedChanges() {
        if (btnSaveAsset.isEnabled()) {
            final String message = "There are unsaved changes. Do you want to save them first?";
            final int selectedOption = JOptionPane.showConfirmDialog(this, message, DIALOG_TITLE_ALERT, YES_NO_CANCEL_OPTION);
            switch (selectedOption) {
                case YES_OPTION:
                    btnSaveAssetActionPerformed();
                    return true;
                case NO_OPTION:
                    discardChanges();
                    return true;
                case CLOSED_OPTION:
                case CANCEL_OPTION:
                default:
                    return false;
            }
        }

        return true;
    }

    private void discardChanges() {
        controller.discardChanges();
        for (JTextField textField : musicEditorFields) {
            textField.setText("");
        }
        for (JTextField textField : spriteEditorFields) {
            textField.setText("");
        }
        lblMusicIdDisplay.setText("");
        lblSpriteIdDisplay.setText("");

        btnCancel.setEnabled(false);
        btnSaveAsset.setEnabled(false);
        btnDelete.setEnabled(null != controller.getSelectedAsset() && null != controller.getSelectedAsset().getId());
    }

    private void controllerPropertyChanged(final PropertyChangeEvent pce) {
        if (AssetManagerController.PROPERTY_SELECTED_ASSET.equals(pce.getPropertyName())) {
            String editorToShow = "music";
            btnDelete.setEnabled(true);
            if (pce.getNewValue() instanceof Music) {
                populateAssetEditor(lblMusicIdDisplay, musicEditorFields);
                btnCancel.setEnabled(false);
                btnSaveAsset.setEnabled(false);
            } else if (pce.getNewValue() instanceof Sprite) {
                final Sprite sprite = (Sprite) pce.getNewValue();
                populateAssetEditor(lblSpriteIdDisplay, spriteEditorFields);
                chkTile.setSelected(sprite.isTile());
                btnCancel.setEnabled(false);
                btnSaveAsset.setEnabled(false);
                final ApplicationFolderService appFolderService = ApplicationFolderService.getDefault();
                final Path appFolderPath = appFolderService.getApplicationFolder();
                if (null != sprite.getRelativePathThumbnail()) {
                    final String thumbnailPath = Path.of(
                            appFolderPath.toString(),
                            sprite.getRelativePathThumbnail()
                    ).toString();
                    lblSpriteThumbnail.setIcon(new ImageIcon(thumbnailPath));
                }
                editorToShow = "sprite";
            } else {
                discardChanges();
                btnCancel.setEnabled(false);
                btnSaveAsset.setEnabled(false);
                btnDelete.setEnabled(false);
            }

            ((CardLayout) (pnlEditor.getLayout())).show(pnlEditor, editorToShow);
        }
    }

    private void populateAssetEditor(final JLabel idDisplay, final JTextField... assetFields) {
        final Asset<?> asset = controller.getSelectedAsset();
        idDisplay.setText(asset.getId());
        assetFields[0].setText(asset.getName());
        assetFields[1].setText(String.join(" ", asset.getTags()));
        assetFields[2].setText(asset.getAttributionData().getAuthor());
        assetFields[3].setText(asset.getAttributionData().getWebsite());
        assetFields[4].setText(asset.getAttributionData().getLicenseLink());
        assetFields[5].setText(asset.getAttributionData().getLicenseText());
    }

    File selectAssetResource(final FileFilter fileFilter) {
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(fileFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        final int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();

        }
        return null;
    }

    private static class ImageFileFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            final String extension = FilenameUtils.getExtension(f.getName()).toUpperCase();
            return "GIF".equals(extension)
                    || "PNG".equals(extension)
                    || "JPEG".equals(extension)
                    || "JPG".equals(extension)
                    || "BMP".equals(extension)
                    || "WBMP".equals(extension);
        }

        @Override
        public String getDescription() {
            return "Image files";
        }
    }

    private static class ImageMusicFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            final String extension = FilenameUtils.getExtension(f.getName()).toUpperCase();
            return "MP3".equals(extension);
        }

        @Override
        public String getDescription() {
            return "Music files";
        }
    }

    private abstract static class AssetUpdateListener implements DocumentListener {

        @Override
        public void changedUpdate(final DocumentEvent e) {
            updateAssetProperty(getCurrentState(e));
        }

        @Override
        public void insertUpdate(final DocumentEvent e) {
            updateAssetProperty(getCurrentState(e));
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            updateAssetProperty(getCurrentState(e));
        }

        private String getCurrentState(final DocumentEvent e) {
            try {
                return e.getDocument().getText(0, e.getDocument().getLength());
            } catch (BadLocationException ex) {
                logger.log(Level.WARNING, "Failed to get text of JTextField", ex);
                return "";
            }
        }

        protected abstract void updateAssetProperty(final String newValue);

    }
    
    private class MusicAuthorUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Music music = (Music) controller.getSelectedAsset();
            if((null != music) && !newValue.equals(music.getAttributionData().getAuthor())) {
                music.getAttributionData().setAuthor(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }

    private class MusicWebsiteUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Music music = (Music) controller.getSelectedAsset();
            if((null != music) && !newValue.equals(music.getAttributionData().getWebsite())) {
                music.getAttributionData().setWebsite(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }    
    
    private class MusicLicenseLinkUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Music music = (Music) controller.getSelectedAsset();
            if((null != music) && !newValue.equals(music.getAttributionData().getLicenseLink())) {
                music.getAttributionData().setLicenseLink(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }
    
    private class MusicLicenseTextUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Music music = (Music) controller.getSelectedAsset();
            if((null != music) && !newValue.equals(music.getAttributionData().getLicenseText())) {
                music.getAttributionData().setLicenseText(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }
    
    private class MusicNameUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Music music = (Music) controller.getSelectedAsset();
            if((null != music) && !newValue.equals(music.getName())) {
                music.setName(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }
    
    private class MusicTagsUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Music music = (Music) controller.getSelectedAsset();
            if(null != music) {             
                music.setTags(Arrays
                        .asList(newValue.split("\\s+"))
                        .stream()
                        .map(String::trim)
                        .distinct()
                        .collect(Collectors.toList()));                   
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }     
        } 
    }    
    
    private class SpriteAuthorUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Sprite sprite = (Sprite) controller.getSelectedAsset();
            if((null != sprite) && !newValue.equals(sprite.getAttributionData().getAuthor())) {
                sprite.getAttributionData().setAuthor(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }
   
    private class SpriteWebsiteUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Sprite sprite = (Sprite) controller.getSelectedAsset();
            if((null != sprite) && !newValue.equals(sprite.getAttributionData().getWebsite())) {
                sprite.getAttributionData().setWebsite(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }    
    }
    
    private class SpriteLicenseLinkUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Sprite sprite = (Sprite) controller.getSelectedAsset();
            if((null != sprite) && !newValue.equals(sprite.getAttributionData().getLicenseLink())) {
                sprite.getAttributionData().setLicenseLink(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }
    
    private class SpriteLicenseTextUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Sprite sprite = (Sprite) controller.getSelectedAsset();
            if((null != sprite) && !newValue.equals(sprite.getAttributionData().getLicenseText())) {
                sprite.getAttributionData().setLicenseText(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }

    private class SpriteNameUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Sprite sprite = (Sprite) controller.getSelectedAsset();
            if((null != sprite) && !newValue.equals(sprite.getName())) {
                sprite.setName(newValue);
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }
        }
    }
    
    private class SpriteTagsUpdateListener extends AssetUpdateListener {
        @Override
        protected void updateAssetProperty(final String newValue) {
            final Sprite sprite = (Sprite) controller.getSelectedAsset();
            if(null != sprite) {
                sprite.setTags(Arrays
                        .asList(newValue.split("\\s+"))
                        .stream()
                        .map(String::trim)
                        .distinct()
                        .collect(Collectors.toList()));                   
                btnSaveAsset.setEnabled(true);
                btnCancel.setEnabled(true);
            }     
        }     
    }

}
