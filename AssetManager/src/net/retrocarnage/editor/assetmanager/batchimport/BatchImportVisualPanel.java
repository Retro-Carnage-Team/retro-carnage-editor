package net.retrocarnage.editor.assetmanager.batchimport;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

public final class BatchImportVisualPanel extends JPanel {

    private File importFolder;

    /**
     * Creates new form BatchImportVisualPanel1
     */
    public BatchImportVisualPanel() {
        initComponents();
    }

    @Override
    public String getName() {
        return "Meta data";
    }

    String getTags() {
        return txtSpriteTags.getText();
    }

    boolean isTile() {
        return chkTile.isSelected();
    }

    String getAuthor() {
        return txtSpriteAuthor.getText();
    }

    String getWebsite() {
        return txtSpriteWebsite.getText();
    }

    String getLicenseLink() {
        return txtSpriteLicenseLink.getText();
    }

    String getLicenseText() {
        return txtSpriteLicenseText.getText();
    }

    File getImportFolder() {
        return importFolder;
    }

    boolean isRecursive() {
        return chkRecursive.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JLabel lblSpriteTags = new javax.swing.JLabel();
        txtSpriteTags = new javax.swing.JTextField();
        javax.swing.JLabel lblTile = new javax.swing.JLabel();
        chkTile = new javax.swing.JCheckBox();
        javax.swing.JPanel pnlSpriteAttribution = new javax.swing.JPanel();
        javax.swing.JLabel lblSpriteAuthor = new javax.swing.JLabel();
        javax.swing.JLabel lblSpriteWebsite = new javax.swing.JLabel();
        javax.swing.JLabel lblSpriteLicenseLink = new javax.swing.JLabel();
        javax.swing.JLabel lblSpriteLicenseText = new javax.swing.JLabel();
        txtSpriteAuthor = new javax.swing.JTextField();
        txtSpriteWebsite = new javax.swing.JTextField();
        txtSpriteLicenseLink = new javax.swing.JTextField();
        txtSpriteLicenseText = new javax.swing.JTextField();
        javax.swing.JLabel lblPath = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        javax.swing.JButton btnPath = new javax.swing.JButton();
        javax.swing.JLabel lblRecursive = new javax.swing.JLabel();
        chkRecursive = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteTags, org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.lblSpriteTags.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        add(lblSpriteTags, gridBagConstraints);

        txtSpriteTags.setText(org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.txtSpriteTags.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(txtSpriteTags, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblTile, org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.lblTile.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        add(lblTile, gridBagConstraints);

        chkTile.setPreferredSize(new java.awt.Dimension(18, 39));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(chkTile, gridBagConstraints);

        pnlSpriteAttribution.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.pnlSpriteAttribution.border.title"))); // NOI18N
        pnlSpriteAttribution.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteAuthor, org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.lblSpriteAuthor.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteAuthor, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteWebsite, org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.lblSpriteWebsite.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteWebsite, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteLicenseLink, org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.lblSpriteLicenseLink.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteLicenseLink, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblSpriteLicenseText, org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.lblSpriteLicenseText.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        pnlSpriteAttribution.add(lblSpriteLicenseText, gridBagConstraints);

        txtSpriteAuthor.setText(org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.txtSpriteAuthor.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteAuthor, gridBagConstraints);

        txtSpriteWebsite.setText(org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.txtSpriteWebsite.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteWebsite, gridBagConstraints);

        txtSpriteLicenseLink.setText(org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.txtSpriteLicenseLink.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteLicenseLink, gridBagConstraints);

        txtSpriteLicenseText.setText(org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.txtSpriteLicenseText.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlSpriteAttribution.add(txtSpriteLicenseText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 2, 2, 2);
        add(pnlSpriteAttribution, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblPath, org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.lblPath.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        add(lblPath, gridBagConstraints);

        txtPath.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(txtPath, gridBagConstraints);

        btnPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/retrocarnage/editor/assetmanager/batchimport/outline_folder_open_black_24dp.png"))); // NOI18N
        btnPath.addActionListener(evt -> btnPathActionPerformed());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(btnPath, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblRecursive, org.openide.util.NbBundle.getMessage(BatchImportVisualPanel.class, "BatchImportVisualPanel.lblRecursive.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 10);
        add(lblRecursive, gridBagConstraints);

        chkRecursive.setPreferredSize(new java.awt.Dimension(18, 39));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(chkRecursive, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPathActionPerformed() {                                        
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (JFileChooser.APPROVE_OPTION == fileChooser.showSaveDialog(this)) {
            importFolder = fileChooser.getSelectedFile();
            txtPath.setText(importFolder.getPath());
        }
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JCheckBox chkRecursive;
    javax.swing.JCheckBox chkTile;
    javax.swing.JTextField txtPath;
    javax.swing.JTextField txtSpriteAuthor;
    javax.swing.JTextField txtSpriteLicenseLink;
    javax.swing.JTextField txtSpriteLicenseText;
    javax.swing.JTextField txtSpriteTags;
    javax.swing.JTextField txtSpriteWebsite;
    // End of variables declaration//GEN-END:variables
}
